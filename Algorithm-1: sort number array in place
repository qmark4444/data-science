Minimum Number of Swaps Required to Sort a Distinct Number Array?

This method only applys to distinct number array
nums = [10, 8, 2, 12, 9, 11]

initial thought: create a new array, where a[i] = i, and a.length = max of nums + 1
a = [null, null, 2 (index=2), null, ..., 8 (index=8), 9, 10, 11, 12]

But since it must be in-place, this initial thought however inspired
[1]
Start from index 0, if nums[0] isn't 0, then compare it with the number at the index nums[0], nums[nums[0]]
[2]
If nums[0] > nums.length, then compare it with the last number, nums[length-1]????
the number at mod(length)?
[3]
If nums[0] is larger, then swap two numbers, otherwise no change?
[4]
redo the above with the new nums[0], until no change, then move on to the next index
--- NOT WORK
=========================================================================

find the max of [1:n] if it is not the last one, swap the max with the last
now the problem is reduced to [1:n-1]
repeat 
total n-1 swaps, but operation is O(n^2)
============================================================
Other sort Algo:
(1) Divide and Conquer = nlog(n)
(2) Hashmap
(3) dynamic programming-1: (0, i-1) (i) --- (0, i-1) is already sorted -- WRONG? if (0, i-1) is already sorted, this is the same as bubble sort????????????
    dp[i-1]=swap numbers
    if (nums[i] > nums[i-1]) then no swap, dp[i]=dp[i-1] --- this is where MIN comes into play
    elseif (nums[i] > nums[j-1] but nums[i] < nums[j]) then dp[i]=dp[i-1]+(i-j) --- this requires change the original order of array, NOT RIGHT?????
     
(4) dynamic programming-2: (i, j) = (i, k-1) (k, j) --- no change of original array   
    minSwap(i, j) - related to minSwap(i, k-1), minSwap(k, j)??????
    dp[i][j] = MIN( dp[i][k-1] + dp[k][j] + swap2 ), for k = i+1 to j-1    (or i to j? NO!!!! this won't reduce dp size, [i][j] = [i][j])
    swap2 = number of swaps of whatever is smaller in (k, j) with the larger in (i, k-1) --- BUT can't swap with whatever is larger!!!!!!
    for any nums[p] in (k, j), find the min(nums[m] > nums[p]) in (i, k-1) -- if exists (min != nums[p]), then swap2++
